create temp table donorfile_update (like anneramirez.ea_sf_donorfile);

insert into donorfile_update
SELECT 
c.vanid,
(case when c.title in (select sf_title from anneramirez.ea_sf_titles) then c.title else null end) as title, 
c.firstname,
c.middlename,
c.lastname,
(case when upper(c.suffix) in (select upper(sf_suffix) from anneramirez.ea_sf_suffix) then c.suffix else null end) as suffix,
(case when coalesce(addr.addressline1,addr.vaddress) IS NOT NULL THEN 'H' ELSE null END) as address_type,
coalesce(addr.addressline1,addr.vaddress) as addressline1,
(case when addr.addressline1 IS NOT NULL THEN addr.addressline2 else null end) as addressline2,
addr.city as city,
coalesce(addr.state,addr.provincename) as state_province, 
coalesce(addr.zip5,addr.postalcode) as zip_postal,
addr.zip4,
addr.countrycode,
em.email,
ph.phone,
ph.phonetypeid 
 
/* *** SOURCE TABLES *** */
FROM 
vansync.ppfa_contacts_mym_cont c

inner JOIN (SELECT DISTINCT
             *
             FROM (SELECT
               *,
               row_number() OVER (PARTITION BY vanid ORDER BY datecreated DESC, contactscontributionid) as rownum
               FROM vansync.ppfa_contactscontributions_mym
			   			where committeeid in (11607,9816,72219,72220,68255,65351,65401,74821)) 
             WHERE rownum=1
           ) cc
USING (vanid)

LEFT JOIN (select
           coalesce(cof.vanid,ca.vanid) as vanid,
           ca.vaddress,
           ca.provincename,
           ca.postalcode,
           ca.countrycode,
           coalesce(cof.addressline1,ca.addressline1) as addressline1,
           coalesce(cof.addressline2,ca.addressline2) as addressline2,
           coalesce(cof.city,ca.city) as city,
           coalesce(cof.state,ca.state) as state,
           coalesce(cof.zip5,ca.zip5) as zip5,
           coalesce(cof.zip4,ca.zip4) as zip4
           from
				(SELECT DISTINCT
             *
             FROM (SELECT
               *,
               row_number ()
               OVER (PARTITION BY vanid ORDER BY contactsaddressid DESC) as rownum
               FROM vansync.ppfa_contactsaddresses_mym
			   where coalesce(vaddress,addressline1) is not null
         and length(coalesce(vaddress,addressline1))>3
			   and city is not null
			   and coalesce(state,provincename) is not null
			   and coalesce(zip5,postalcode) is not null
         and datesuppressed is null
			   					) a
             WHERE rownum=1
			) ca
      full outer join 
           (select distinct * from
            (select *, row_number() over (partition by vanid order by contactsaddressid desc) as rownum
             from
      	(select distinct a.datecreated, a.vanid, b.contactsaddressid, b.addressline1,b.addressline2,b.city,coalesce(b.state,b.provincename) as state,coalesce(b.zip5,b.postalcode) as zip5, b.zip4
 				from
 					(select distinct * 
  				from
  					(select *, row_number () over (partition by vanid order by datecreated desc, contactsonlineformid desc) as rownum 
   					from vansync.ppfa_contactsonlineforms_mym
   					where submittedaddressline1 is not null
        		) where rownum=1
    			) a
				left join vansync.ppfa_contactsaddresses_mym b on a.vanid=b.vanid
				where upper(left(a.submittedaddressline1,5)) ilike upper(left(b.addressline1,5))
				and b.datesuppressed is null
         and a.datecreated>=current_date-180
				))
            where rownum=1) cof on ca.vanid=cof.vanid
           ) addr 
           --so: addresses on contactsonlineforms are not formatted. so we want to compare the date of the most recent form submission with full address info, to the date of the most recent address created on the record, and pull the most recent one - BUT if it's the onlineforms address, match it back to the address on the record and pull the properly formatted one. also we don't actually have datecreated on the contactsaddress table right now so i set 6mos as an arbitrary time period
USING (vanid)
LEFT JOIN (SELECT DISTINCT
             *
             FROM (SELECT
               *,
               row_number ()
               OVER (PARTITION BY vanid ORDER BY preferredemail desc, datecreated desc, contactsemailid desc) as rownum
               FROM vansync.ppfa_contactsemails_mym
			   where datesuppressed is null) a
             WHERE rownum=1
           ) em
USING (vanid)
LEFT JOIN (SELECT DISTINCT
             *
             FROM (SELECT
               *,
               row_number ()
               OVER (PARTITION BY vanid ORDER BY preferredphone desc,datecreated desc, contactsphoneid desc) as rownum
               FROM vansync.ppfa_contactsphones_mym
			   where datesuppressed is null
			   and phonetypeid='H') a
             WHERE rownum=1
           ) ph
USING (vanid)
where ((cc.datecreated::date=current_date-1) OR (c.datemodified::date=current_date-1) OR (c.vanid in (select distinct vanid from anneramirez.ea_sf_giftfile) and c.vanid not in (select vanid from anneramirez.donorfile_updatetest)))
;

/* remove old outdated rows */
begin transaction;

delete from anneramirez.ea_sf_donorfile
using donorfile_update 
where ea_sf_donorfile.vanid=donorfile_update.vanid; 

/* insert new and updated rows */
insert into anneramirez.ea_sf_donorfile
select * from donorfile_update dfu
where dfu.vanid not in (select vanid from anneramirez.ea_sf_donorfile);

end transaction;

drop table donorfile_update;